// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI;

namespace WebAPI.Migrations
{
    [DbContext(typeof(antifraudContext))]
    [Migration("20220419162139_rewind")]
    partial class rewind
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("WebAPI.Country", b =>
                {
                    b.Property<byte>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("WebAPI.Form", b =>
                {
                    b.Property<int>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FormId");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("WebAPI.FormTime", b =>
                {
                    b.Property<int>("FormTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Form")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("FormTimeId");

                    b.HasIndex("Form");

                    b.ToTable("FormTime");
                });

            modelBuilder.Entity("WebAPI.Name", b =>
                {
                    b.Property<string>("Name1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Name");

                    b.ToTable("Name");
                });

            modelBuilder.Entity("WebAPI.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SectionId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("WebAPI.SectionTime", b =>
                {
                    b.Property<int>("SectionTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Section")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("SectionTimeId");

                    b.HasIndex("Section");

                    b.ToTable("SectionTime");
                });

            modelBuilder.Entity("WebAPI.Session", b =>
                {
                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Country")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Form")
                        .HasColumnType("int");

                    b.Property<bool>("Pk")
                        .HasColumnType("bit")
                        .HasColumnName("PK");

                    b.Property<int>("Section")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Users")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("Country");

                    b.HasIndex("Form");

                    b.HasIndex("Section");

                    b.HasIndex("Users");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("WebAPI.Surname", b =>
                {
                    b.Property<string>("Surname1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Surname");

                    b.ToTable("Surname");
                });

            modelBuilder.Entity("WebAPI.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FIO");

                    b.Property<short>("Mark")
                        .HasColumnType("smallint");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebAPI.FormTime", b =>
                {
                    b.HasOne("WebAPI.Form", "FormNavigation")
                        .WithMany("FormTimes")
                        .HasForeignKey("Form")
                        .HasConstraintName("FK_FormTime_Form")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormNavigation");
                });

            modelBuilder.Entity("WebAPI.SectionTime", b =>
                {
                    b.HasOne("WebAPI.Section", "SectionNavigation")
                        .WithMany("SectionTimes")
                        .HasForeignKey("Section")
                        .HasConstraintName("FK_SectionTime_Section")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionNavigation");
                });

            modelBuilder.Entity("WebAPI.Session", b =>
                {
                    b.HasOne("WebAPI.Country", "CountryNavigation")
                        .WithMany("Sessions")
                        .HasForeignKey("Country")
                        .HasConstraintName("FK_Session_Country")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.FormTime", "FormNavigation")
                        .WithMany("Sessions")
                        .HasForeignKey("Form")
                        .HasConstraintName("FK_Session_FormTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.SectionTime", "SectionNavigation")
                        .WithMany("Sessions")
                        .HasForeignKey("Section")
                        .HasConstraintName("FK_Session_SectionTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.User", "UsersNavigation")
                        .WithMany("Sessions")
                        .HasForeignKey("Users")
                        .HasConstraintName("FK_Session_Users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryNavigation");

                    b.Navigation("FormNavigation");

                    b.Navigation("SectionNavigation");

                    b.Navigation("UsersNavigation");
                });

            modelBuilder.Entity("WebAPI.Country", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebAPI.Form", b =>
                {
                    b.Navigation("FormTimes");
                });

            modelBuilder.Entity("WebAPI.FormTime", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebAPI.Section", b =>
                {
                    b.Navigation("SectionTimes");
                });

            modelBuilder.Entity("WebAPI.SectionTime", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebAPI.User", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
